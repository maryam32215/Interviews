x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: docker/airflow.Dockerfile
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW_CONN_XKCD_DB: 'postgresql://airflow:airflow@postgres:5432/xkcd'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./dbt:/opt/dbt
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - >
        airflow db init &&
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin &&
        psql "postgresql://airflow:airflow@postgres:5432/airflow" -c "CREATE DATABASE xkcd" &&
        psql "postgresql://airflow:airflow@postgres:5432/airflow" -c "GRANT ALL PRIVILEGES ON DATABASE xkcd TO airflow" 

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler

  dbt:
    platform: linux/arm64
    build:
      context: .
      dockerfile: docker/dbt.Dockerfile
    volumes:
      - ./dbt:/opt/dbt
    environment:
      - DBT_PROFILES_DIR=/opt/dbt
    depends_on:
      - postgres

volumes:
  postgres-db-volume: